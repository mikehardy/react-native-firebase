name: 'Create Test Patches'

on:
  workflow_dispatch:
  push:
    branches:
      - '**'
    paths-ignore:
      - 'docs/**'
      - 'website/**'
      - '.spellcheck.dict.txt'
      - '**/*.md'
  pull_request:
    branches:
      - '**'
    paths-ignore:
      - 'docs/**'
      - 'website/**'
      - '.spellcheck.dict.txt'
      - '**/*.md'

jobs:
  main:
    name: Create patch-package Patches
    runs-on: ubuntu-latest
    steps:
      # Runs against pull_request_target so github token maintains write permissions, 
      # but needs to clone out the actual PR (to get new source for patches)
      - uses: actions/checkout@v2

      # if it were an action it would take the directory to move into in order to have an example app using the PR as a dependency
      # do all the preparatory commands 
      # run npx patch-package on a list of packages (so it can handle monorepos)
      # can the patches be named for version AND PR? They need a version-PR-commithash almost, to differentiate unambigiously

      - uses: actions/setup-node@v2-beta

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        name: Yarn Cache
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/package.json') }}-v1

      - name: Yarn Install
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 10
          retry_wait_seconds: 60
          max_attempts: 3
          command: DETOX_DISABLE_POSTINSTALL=1 yarn --no-audit --prefer-offline

      - name: Create Patches
        run: |
          PACKAGE_LIST=`find packages -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | egrep -v 'template|invites'`
          mkdir $HOME/packages
          for PACKAGE in $PACKAGE_LIST; do
            echo "Packing PR version of package $PACKAGE"
            pushd packages/$PACKAGE;
            yarn pack;
            mv *tgz $HOME/packages;
            ls -la $HOME/packages/*${PACKAGE}*
            popd;
          done
          ls -la $HOME/packages/
          cd $HOME
          npx react-native init template
          cd template
          for PACKAGE in $PACKAGE_LIST; do
            echo "Installing package $PACKAGE into fresh template app, then clobbering with PR version"
            yarn add @react-native-firebase/$PACKAGE
            pushd node_modules/@react-native-firebase
            \rm -fr $PACKAGE
            tar -zxf $HOME/packages/*${PACKAGE}*
            mv package $PACKAGE
            popd
          done
          cd $HOME/template
          yarn add patch-package --save-dev
          mkdir patches || true
          for PACKAGE in $PACKAGE_LIST; do
            echo "Making patch-package patch for package $PACKAGE"
            npx patch-package @react-native-firebase/$PACKAGE
          done
          ls -la $HOME/template/patches
        shell: bash

      - name: Upload Test Patches
        uses: actions/upload-artifact@v2
        with:
          name: patches
          path: template/patches/@react-native-firebase*
  
      # create a comment on the PR and any related issues with a direct link to the archive,
      # a call for testers, and perhaps a paste-able set of commands to install them 
      # (mkdir patches, curl -o etc, npx patch-package)